sessions from 7th dec - 10th dec
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-> angular: 
	- an angular is a platform and javascript framework
	- for building the single page applications using Html, Css, Bootstrap and Typescript
	- it implements core and optional functionality as a a set of typescript libraries that you import into your applications
	
-> the architecture of an angular relies on certain fundamental concepts:
	terms:
		1. Template
		2. Directive - (meta data)
		3. Component
		4. Injector
		5. Module
		
-> single page applications:
	- an angular is a javascript frontend web framework based on bi-directional ui data binding
	- is used to design single page applications
	- the applications that load a single Html page and only a part of the page will be updated instead of the entire page - based on the user actions (click, hover, drag, etc.)

-> who are implementing the single page applications: 
	- gmail, google maps, airbnb, netflix etc.,
	
-> when angular can use?
	- it's called the safe navigation operator which can be used to prevent angular from throwing errors, when trying to access object properties of an object that doesn't exist
	
-> setup an env., and creating the project:
	- install node and npm - 14v
	- npm install -g @angular/cli
	- ng --version
	
	to create a new project
	- ng new yourappname
		1. routing (y)
		2. style - css (select) / stylus / less / scss
	- ng serve (or) npm starts
	
		
-> to create a responsive: 
	- bootstrap: npm install --save bootstrap
	- in angular.json file: "../node_modules/bootstrap/dist/css/bootstrap.min.css"
	
-> creating the new custom component
	- adding styles to it
	- declaring the property(s) in side the class defin., of component
	- accessing or interpolation or one way property binding - {{ }}
	
	- to set the component as the landing page 
		1. the name of the component should be declared and needs to specify under bootstrap: [] - app.module.ts
		2. in index.html file - needs to specify the given selector of that component
		
	(or)
	
	- creating new component with command
		- ng generate component <compname>

	
-> property binding: 
	- displaying the value of property in html
	- there are two types: 
		1. one way property binding - {{propertyName}}
		2. two way property binding - user can input the values
			1. template driven 
			2. reactive form
	

-> template driven
	- ngForm
	- ngModel
	
	- (event) = "methodName(parameters)"
	- custome method definition

sessions from 13th dec - 17th dec
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-> custom (or) template driven form validation
	- modules: FormsModule
	
	- ngForm
	- ngModel
	
	- [(ngModel)]=""
	- #idName="ngModel"
	
	- submitted, invalid
	- errors, errors.invalid
	- errors.email
	- errors.minlength
	
	- [ngClass]="{'is-invalid': ...}"

-> reactive form validation
	- modules: ReactiveFormsModule, 
	- component level modules: FormBuilder, FormGroup, Validators

	- [ngClass]
	- *ngIf
	- *ngFor

	
	
-> let's discuss the few differences between template driven and reactive
	- the Template Driven Forms are Asynchronous (Non - Blocking) 
	- whereas, the Reactive Forms are Synchronous (Blocking)

	- in Template Driven most of the 'logic' is driven from the Template
	- in Reactive, the logic resides mainly in the component or typescript code
	
	- the Template Driven approach would be easier or familiar for those who coming from AngularJS v1
	- the Reactive approach removes the core validation logic from the Template and hence make the Template code quite clean
	
-> Creating the Routing in Angular:
	- Enabling Routing and Navigation Service
	- Routing allows users to Navigate between one page (component) to another page (component) based on the action taken by user,
	
	- static: routerLink = "/home"; 
	- in app-routing.module.ts
		{ path: "/home", component: HomeComponent }

	- dynamic: [routerLink] = "/page/:variable"

-> Directives in Angular:
	- Directives are DOM elements to interact with your applications.
	- Directive is a TypeScript Function.
	- When this function executes the Angular Compiler checked it inside the DOM element.
	
	- DOM?
		- DOM is used to define a standard for accessing documents.
		- Html DOM model is constructed as a tree of objects. 
		- It is a standard object model to access html elements
		
		- we can use DOM model in Angular
			- Navigate the document structure with DOM elements
			- Add Html elements
			- Update elements
	
	- Angular directive begins with ng stands for Angular and extends Html tags with @directive decorator
	- Directives enables logic to be included in the Angular Templates.
	
	- Angular directives are categorized into 3 
		1. Component Directives
		2. Structual Directives
		3. Attribute Directives
		
	1. Component Directives: 
		- Component Directives are used in Main Class.
		- They contain the detail of How the Component should be Processed, Instantiate and used at Runtime.
		- Component can be used as Directives. 
		- Every Component has Input and Output option to pass between component and its parent HTML elements

		Syntax: <component-selector-name [input-reference]="input-value"> ... </component-selector-name>
		Example: <list-item [items]="products"> ... </list-item>
		
		
	2. Structual Directives: 
		- The Structual Directives start with a '*' sign.
		- These Directive are used to manipulate and changee the structure of the DOM elements
		- Used to add or remove DOM elements in the current Html document
		
		Syntax: <html-selector-name *DirectiveName="itsValue"> ... </html-selector-name> 
		Example: <p *ngIf="true"> .. </p>
		
		Some List of Structual Directives: *ngIf, *ngFor, *ngSwitch
		
		*ngIf - It allows us to add / remove the DOM element
		*ngSwitch - allows us to add / remove the DOM element. It is similar to Switch statement
		*ngFor - It is used to repeat a portion of Html element once per each item form an iterable list
	
	3. Attribute Directives: 
		- It is used to look and behaviour of the DOM elements
		- Used to add new directives for thhe existing Html elements to change its look and behaviour
		
		Syntax: <html-selector-name [attriName]="itsValue" >
		Example: <p [ngStyle]=""> .. </p>
	
		Some List of Attribute Directives: ngClass, ngStyle
		
		
-> Creating the Template or Layout with Custom CSS and Routing: 
	- css: grid-<>
	
-> Crud Operations:
	- two way property binding with template driven
	- created the model and service
	- accessing the service into the component
	
-> Lazy Loading: 
	- lazy loading is a technique in angular that allows you to load javascript components asynchronously when a specific route is activated. 
	- it improves the speed of the application loading time by splitting the application into several bundles.
	- when the user navigates through the application the bundles are loaded as required.
	
	- ViewContainerRef: 
		- ViewContainerRef represents a container where one or more views can be attached.
		- the first thing to mention here is that any DOM element can be used as a View Container
		- Angular doesn't insert views inside the element but appends then after the element bound to ViewContainer
		
	- ComponentFactoryResolver: 
		- a simple registry that maps Components to generated ComponentFactory classes that can be used to Create Instance of Components.
		- use to obtain the factory for a given component type, then the factory's create() method to create a component.

	- ViewChild: 
		- a ViewChild is a Component, Directive or Element as a part of a Template.
		- If we want to access to a Child Component, Directive, or Element inside the Parent Component, 
			we use @ViewChild()
		- since the Child Component can be located inside the Parent Component it can be accesse as @ViewChild
		
	- ElementRef: 
		- the ElementRef is a wrapper around a Native Element inside of a View.
		- It's simply a Class that wraps Native DOM elements inside the browser and allows you to work with the DOM by providing the nativeElement object which exposes all the Methods and Properties of the Native Elements
		




















	
	
	
	
	
	
	
	